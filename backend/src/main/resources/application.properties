# Database Configuration (H2 for Development - Embedded mode)
spring.datasource.url=jdbc:h2:file:./data/church_app;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.driver-class-name=org.h2.Driver
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# JPA Configuration
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Server Configuration
server.port=8083
server.servlet.context-path=/api

# JWT Configuration
jwt.secret=your-super-secret-jwt-key-change-this-in-production-use-at-least-256-bits
jwt.expiration=86400000

# Google OAuth2 Configuration
# TODO: Replace with your actual Google OAuth credentials from Google Cloud Console
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8083/api/oauth2/callback/google

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# CORS Configuration
cors.allowed-origins=http://localhost:3000,http://localhost:3001,http://localhost:8100,capacitor://localhost,http://localhost
cors.allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS
cors.allowed-headers=*
cors.allow-credentials=true

# AWS S3 Configuration (replace with your actual credentials)
aws.access-key-id=${AWS_ACCESS_KEY_ID:your-aws-access-key-id}
aws.secret-access-key=${AWS_SECRET_ACCESS_KEY:your-aws-secret-access-key}
aws.region=us-west-2
aws.s3.bucket-name=church-app-uploads-stevensills2

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Stripe Configuration
stripe.public.key=${STRIPE_PUBLIC_KEY:pk_test_your-stripe-public-key}
stripe.secret.key=${STRIPE_SECRET_KEY:sk_test_your-stripe-secret-key}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET:whsec_your-webhook-secret}

# Email Configuration for Receipts
spring.mail.host=${SMTP_HOST:smtp.gmail.com}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${SMTP_USERNAME:your-email@example.com}
spring.mail.password=${SMTP_PASSWORD:your-app-password}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Church Configuration for Receipts
church.name=${CHURCH_NAME:Sample Church}
church.address=${CHURCH_ADDRESS:123 Main St, City, State 12345}
church.phone=${CHURCH_PHONE:(555) 123-4567}
church.email=${CHURCH_EMAIL:info@samplechurch.org}
church.website=${CHURCH_WEBSITE:www.samplechurch.org}
church.tax-id=${CHURCH_TAX_ID:00-0000000}

# Logging Configuration for Debugging
logging.level.com.churchapp.security=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.churchapp.controller=DEBUG

# Jackson Configuration for proper timestamp serialization
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.deserialization.fail-on-unknown-properties=false
# Use system default timezone instead of forcing UTC to avoid date offset issues
# spring.jackson.time-zone=UTC

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized

# Debug Spring Boot Auto-configuration - Removed for production